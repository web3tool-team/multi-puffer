import { ethers } from "ethers";
import { readFileSync } from 'fs';

const provider = new ethers.providers.JsonRpcProvider('https://eth-mainnet.g.alchemy.com/v2/节点');

// 生成 v, r, s 参数
async function getSignature(owner, spender, value, nonce, deadline, privateKey) {
    const domain = {
        name: 'Liquid staked Ether 2.0',
        version: '2',
        chainId: 1, // 以太坊主网 chainId
        verifyingContract: '0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84', // 合约地址
    };

    const types = {
        Permit: [
            { name: 'owner', type: 'address' },
            { name: 'spender', type: 'address' },
            { name: 'value', type: 'uint256' },
            { name: 'nonce', type: 'uint256' },
            { name: 'deadline', type: 'uint256' },
        ],
    };

    const message = {
        owner,
        spender,
        value,
        nonce,
        deadline,
    };

    const signer = new ethers.Wallet(privateKey, provider);
    const signature = await signer._signTypedData(domain, types, message);
    const { v, r, s } = ethers.utils.splitSignature(signature);

    return { v, r, s };
}

// 调用 depositStETH 方法
async function callDeposit(privateKey) {
    // 读取配置文件
    const configData = readFileSync('config.json');
    const config = JSON.parse(configData);
    // 创建合约实例
    const contractAddress = '0x4aA799C5dfc01ee7d790e3bf1a7C2257CE1DcefF';
    const abi = [{ "inputs": [{ "internalType": "contract PufferVault", "name": "pufferVault", "type": "address" }, { "internalType": "contract IStETH", "name": "stETH", "type": "address" }], "stateMutability": "payable", "type": "constructor" }, { "inputs": [{ "internalType": "address", "name": "authority", "type": "address" }], "name": "AccessManagedInvalidAuthority", "type": "error" }, { "inputs": [{ "internalType": "address", "name": "caller", "type": "address" }, { "internalType": "uint32", "name": "delay", "type": "uint32" }], "name": "AccessManagedRequiredDelay", "type": "error" }, { "inputs": [{ "internalType": "address", "name": "caller", "type": "address" }], "name": "AccessManagedUnauthorized", "type": "error" }, { "inputs": [{ "internalType": "address", "name": "target", "type": "address" }], "name": "AddressEmptyCode", "type": "error" }, { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "AddressInsufficientBalance", "type": "error" }, { "inputs": [{ "internalType": "address", "name": "implementation", "type": "address" }], "name": "ERC1967InvalidImplementation", "type": "error" }, { "inputs": [], "name": "ERC1967NonPayable", "type": "error" }, { "inputs": [], "name": "FailedInnerCall", "type": "error" }, { "inputs": [], "name": "InvalidInitialization", "type": "error" }, { "inputs": [], "name": "NotInitializing", "type": "error" }, { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }], "name": "SafeERC20FailedOperation", "type": "error" }, { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "SwapFailed", "type": "error" }, { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }], "name": "TokenNotAllowed", "type": "error" }, { "inputs": [], "name": "UUPSUnauthorizedCallContext", "type": "error" }, { "inputs": [{ "internalType": "bytes32", "name": "slot", "type": "bytes32" }], "name": "UUPSUnsupportedProxiableUUID", "type": "error" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "authority", "type": "address" }], "name": "AuthorityUpdated", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint64", "name": "version", "type": "uint64" }], "name": "Initialized", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "contract IERC20", "name": "token", "type": "address" }], "name": "TokenAllowed", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "contract IERC20", "name": "token", "type": "address" }], "name": "TokenDisallowed", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "implementation", "type": "address" }], "name": "Upgraded", "type": "event" }, { "inputs": [], "name": "PUFFER_VAULT", "outputs": [{ "internalType": "contract PufferVault", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "UPGRADE_INTERFACE_VERSION", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "authority", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "components": [{ "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint8", "name": "v", "type": "uint8" }, { "internalType": "bytes32", "name": "r", "type": "bytes32" }, { "internalType": "bytes32", "name": "s", "type": "bytes32" }], "internalType": "struct IPufferDepositor.Permit", "name": "permitData", "type": "tuple" }], "name": "depositStETH", "outputs": [{ "internalType": "uint256", "name": "pufETHAmount", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "components": [{ "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint8", "name": "v", "type": "uint8" }, { "internalType": "bytes32", "name": "r", "type": "bytes32" }, { "internalType": "bytes32", "name": "s", "type": "bytes32" }], "internalType": "struct IPufferDepositor.Permit", "name": "permitData", "type": "tuple" }], "name": "depositWstETH", "outputs": [{ "internalType": "uint256", "name": "pufETHAmount", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "accessManager", "type": "address" }], "name": "initialize", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "isConsumingScheduledOp", "outputs": [{ "internalType": "bytes4", "name": "", "type": "bytes4" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "proxiableUUID", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "newAuthority", "type": "address" }], "name": "setAuthority", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "bytes", "name": "routeCode", "type": "bytes" }], "name": "swapAndDeposit", "outputs": [{ "internalType": "uint256", "name": "pufETHAmount", "type": "uint256" }], "stateMutability": "payable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "bytes", "name": "callData", "type": "bytes" }], "name": "swapAndDeposit1Inch", "outputs": [{ "internalType": "uint256", "name": "pufETHAmount", "type": "uint256" }], "stateMutability": "payable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "components": [{ "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint8", "name": "v", "type": "uint8" }, { "internalType": "bytes32", "name": "r", "type": "bytes32" }, { "internalType": "bytes32", "name": "s", "type": "bytes32" }], "internalType": "struct IPufferDepositor.Permit", "name": "permitData", "type": "tuple" }, { "internalType": "bytes", "name": "routeCode", "type": "bytes" }], "name": "swapAndDepositWithPermit", "outputs": [{ "internalType": "uint256", "name": "pufETHAmount", "type": "uint256" }], "stateMutability": "payable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "tokenIn", "type": "address" }, { "components": [{ "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint8", "name": "v", "type": "uint8" }, { "internalType": "bytes32", "name": "r", "type": "bytes32" }, { "internalType": "bytes32", "name": "s", "type": "bytes32" }], "internalType": "struct IPufferDepositor.Permit", "name": "permitData", "type": "tuple" }, { "internalType": "bytes", "name": "callData", "type": "bytes" }], "name": "swapAndDepositWithPermit1Inch", "outputs": [{ "internalType": "uint256", "name": "pufETHAmount", "type": "uint256" }], "stateMutability": "payable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "newImplementation", "type": "address" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "upgradeToAndCall", "outputs": [], "stateMutability": "payable", "type": "function" }]// 设置合约地址
    const wallet = new ethers.Wallet(privateKey, provider)
    const contract = new ethers.Contract(contractAddress, abi, wallet);
    // 创建erc20合约实例
    const stTokenAbi = [{ "constant": false, "inputs": [], "name": "resume", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "name", "outputs": [{ "name": "", "type": "string" }], "payable": false, "stateMutability": "pure", "type": "function" }, { "constant": false, "inputs": [], "name": "stop", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "hasInitialized", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "_spender", "type": "address" }, { "name": "_amount", "type": "uint256" }], "name": "approve", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "STAKING_CONTROL_ROLE", "outputs": [{ "name": "", "type": "bytes32" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "totalSupply", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "_ethAmount", "type": "uint256" }], "name": "getSharesByPooledEth", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "isStakingPaused", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "_sender", "type": "address" }, { "name": "_recipient", "type": "address" }, { "name": "_amount", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [{ "name": "_script", "type": "bytes" }], "name": "getEVMScriptExecutor", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "_maxStakeLimit", "type": "uint256" }, { "name": "_stakeLimitIncreasePerBlock", "type": "uint256" }], "name": "setStakingLimit", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "RESUME_ROLE", "outputs": [{ "name": "", "type": "bytes32" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "_lidoLocator", "type": "address" }, { "name": "_eip712StETH", "type": "address" }], "name": "finalizeUpgrade_v2", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "decimals", "outputs": [{ "name": "", "type": "uint8" }], "payable": false, "stateMutability": "pure", "type": "function" }, { "constant": true, "inputs": [], "name": "getRecoveryVault", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "DOMAIN_SEPARATOR", "outputs": [{ "name": "", "type": "bytes32" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "getTotalPooledEther", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "_newDepositedValidators", "type": "uint256" }], "name": "unsafeChangeDepositedValidators", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "PAUSE_ROLE", "outputs": [{ "name": "", "type": "bytes32" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "_spender", "type": "address" }, { "name": "_addedValue", "type": "uint256" }], "name": "increaseAllowance", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "getTreasury", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "isStopped", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "getBufferedEther", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "_lidoLocator", "type": "address" }, { "name": "_eip712StETH", "type": "address" }], "name": "initialize", "outputs": [], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": false, "inputs": [], "name": "receiveELRewards", "outputs": [], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": true, "inputs": [], "name": "getWithdrawalCredentials", "outputs": [{ "name": "", "type": "bytes32" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "getCurrentStakeLimit", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "getStakeLimitFullInfo", "outputs": [{ "name": "isStakingPaused", "type": "bool" }, { "name": "isStakingLimitSet", "type": "bool" }, { "name": "currentStakeLimit", "type": "uint256" }, { "name": "maxStakeLimit", "type": "uint256" }, { "name": "maxStakeLimitGrowthBlocks", "type": "uint256" }, { "name": "prevStakeLimit", "type": "uint256" }, { "name": "prevStakeBlockNumber", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "_sender", "type": "address" }, { "name": "_recipient", "type": "address" }, { "name": "_sharesAmount", "type": "uint256" }], "name": "transferSharesFrom", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [{ "name": "_account", "type": "address" }], "name": "balanceOf", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [], "name": "resumeStaking", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "getFeeDistribution", "outputs": [{ "name": "treasuryFeeBasisPoints", "type": "uint16" }, { "name": "insuranceFeeBasisPoints", "type": "uint16" }, { "name": "operatorsFeeBasisPoints", "type": "uint16" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [], "name": "receiveWithdrawals", "outputs": [], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": true, "inputs": [{ "name": "_sharesAmount", "type": "uint256" }], "name": "getPooledEthByShares", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "token", "type": "address" }], "name": "allowRecoverability", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "owner", "type": "address" }], "name": "nonces", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "appId", "outputs": [{ "name": "", "type": "bytes32" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "getOracle", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "eip712Domain", "outputs": [{ "name": "name", "type": "string" }, { "name": "version", "type": "string" }, { "name": "chainId", "type": "uint256" }, { "name": "verifyingContract", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "getContractVersion", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "getInitializationBlock", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "_recipient", "type": "address" }, { "name": "_sharesAmount", "type": "uint256" }], "name": "transferShares", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "symbol", "outputs": [{ "name": "", "type": "string" }], "payable": false, "stateMutability": "pure", "type": "function" }, { "constant": true, "inputs": [], "name": "getEIP712StETH", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "", "type": "address" }], "name": "transferToVault", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [{ "name": "_sender", "type": "address" }, { "name": "_role", "type": "bytes32" }, { "name": "_params", "type": "uint256[]" }], "name": "canPerform", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "_referral", "type": "address" }], "name": "submit", "outputs": [{ "name": "", "type": "uint256" }], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_spender", "type": "address" }, { "name": "_subtractedValue", "type": "uint256" }], "name": "decreaseAllowance", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "getEVMScriptRegistry", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "_recipient", "type": "address" }, { "name": "_amount", "type": "uint256" }], "name": "transfer", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_maxDepositsCount", "type": "uint256" }, { "name": "_stakingModuleId", "type": "uint256" }, { "name": "_depositCalldata", "type": "bytes" }], "name": "deposit", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "UNSAFE_CHANGE_DEPOSITED_VALIDATORS_ROLE", "outputs": [{ "name": "", "type": "bytes32" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "getBeaconStat", "outputs": [{ "name": "depositedValidators", "type": "uint256" }, { "name": "beaconValidators", "type": "uint256" }, { "name": "beaconBalance", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [], "name": "removeStakingLimit", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_reportTimestamp", "type": "uint256" }, { "name": "_timeElapsed", "type": "uint256" }, { "name": "_clValidators", "type": "uint256" }, { "name": "_clBalance", "type": "uint256" }, { "name": "_withdrawalVaultBalance", "type": "uint256" }, { "name": "_elRewardsVaultBalance", "type": "uint256" }, { "name": "_sharesRequestedToBurn", "type": "uint256" }, { "name": "_withdrawalFinalizationBatches", "type": "uint256[]" }, { "name": "_simulatedShareRate", "type": "uint256" }], "name": "handleOracleReport", "outputs": [{ "name": "postRebaseAmounts", "type": "uint256[4]" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "getFee", "outputs": [{ "name": "totalFee", "type": "uint16" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "kernel", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "getTotalShares", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "_owner", "type": "address" }, { "name": "_spender", "type": "address" }, { "name": "_value", "type": "uint256" }, { "name": "_deadline", "type": "uint256" }, { "name": "_v", "type": "uint8" }, { "name": "_r", "type": "bytes32" }, { "name": "_s", "type": "bytes32" }], "name": "permit", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [{ "name": "_owner", "type": "address" }, { "name": "_spender", "type": "address" }], "name": "allowance", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "isPetrified", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "getLidoLocator", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "canDeposit", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "STAKING_PAUSE_ROLE", "outputs": [{ "name": "", "type": "bytes32" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "getDepositableEther", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "_account", "type": "address" }], "name": "sharesOf", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [], "name": "pauseStaking", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "getTotalELRewardsCollected", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "payable": true, "stateMutability": "payable", "type": "fallback" }, { "anonymous": false, "inputs": [], "name": "StakingPaused", "type": "event" }, { "anonymous": false, "inputs": [], "name": "StakingResumed", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "maxStakeLimit", "type": "uint256" }, { "indexed": false, "name": "stakeLimitIncreasePerBlock", "type": "uint256" }], "name": "StakingLimitSet", "type": "event" }, { "anonymous": false, "inputs": [], "name": "StakingLimitRemoved", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "reportTimestamp", "type": "uint256" }, { "indexed": false, "name": "preCLValidators", "type": "uint256" }, { "indexed": false, "name": "postCLValidators", "type": "uint256" }], "name": "CLValidatorsUpdated", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "depositedValidators", "type": "uint256" }], "name": "DepositedValidatorsChanged", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "reportTimestamp", "type": "uint256" }, { "indexed": false, "name": "preCLBalance", "type": "uint256" }, { "indexed": false, "name": "postCLBalance", "type": "uint256" }, { "indexed": false, "name": "withdrawalsWithdrawn", "type": "uint256" }, { "indexed": false, "name": "executionLayerRewardsWithdrawn", "type": "uint256" }, { "indexed": false, "name": "postBufferedEther", "type": "uint256" }], "name": "ETHDistributed", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "reportTimestamp", "type": "uint256" }, { "indexed": false, "name": "timeElapsed", "type": "uint256" }, { "indexed": false, "name": "preTotalShares", "type": "uint256" }, { "indexed": false, "name": "preTotalEther", "type": "uint256" }, { "indexed": false, "name": "postTotalShares", "type": "uint256" }, { "indexed": false, "name": "postTotalEther", "type": "uint256" }, { "indexed": false, "name": "sharesMintedAsFees", "type": "uint256" }], "name": "TokenRebased", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "lidoLocator", "type": "address" }], "name": "LidoLocatorSet", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "amount", "type": "uint256" }], "name": "ELRewardsReceived", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "amount", "type": "uint256" }], "name": "WithdrawalsReceived", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "sender", "type": "address" }, { "indexed": false, "name": "amount", "type": "uint256" }, { "indexed": false, "name": "referral", "type": "address" }], "name": "Submitted", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "amount", "type": "uint256" }], "name": "Unbuffered", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "executor", "type": "address" }, { "indexed": false, "name": "script", "type": "bytes" }, { "indexed": false, "name": "input", "type": "bytes" }, { "indexed": false, "name": "returnData", "type": "bytes" }], "name": "ScriptResult", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "vault", "type": "address" }, { "indexed": true, "name": "token", "type": "address" }, { "indexed": false, "name": "amount", "type": "uint256" }], "name": "RecoverToVault", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "eip712StETH", "type": "address" }], "name": "EIP712StETHInitialized", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "from", "type": "address" }, { "indexed": true, "name": "to", "type": "address" }, { "indexed": false, "name": "sharesValue", "type": "uint256" }], "name": "TransferShares", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "account", "type": "address" }, { "indexed": false, "name": "preRebaseTokenAmount", "type": "uint256" }, { "indexed": false, "name": "postRebaseTokenAmount", "type": "uint256" }, { "indexed": false, "name": "sharesAmount", "type": "uint256" }], "name": "SharesBurnt", "type": "event" }, { "anonymous": false, "inputs": [], "name": "Stopped", "type": "event" }, { "anonymous": false, "inputs": [], "name": "Resumed", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "from", "type": "address" }, { "indexed": true, "name": "to", "type": "address" }, { "indexed": false, "name": "value", "type": "uint256" }], "name": "Transfer", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "owner", "type": "address" }, { "indexed": true, "name": "spender", "type": "address" }, { "indexed": false, "name": "value", "type": "uint256" }], "name": "Approval", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "version", "type": "uint256" }], "name": "ContractVersionSet", "type": "event" }];
    const stEthAddress = '0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84';
    // 连接合约
    const erc20Permit = new ethers.Contract(stEthAddress, stTokenAbi, wallet);

    const deadline = Math.floor(Date.now() / 1000) + 3600; // 1 小时后过期
    const randomBetween = getRandomBetween(config.amountMin, config.amountMax);
    let amount = ethers.utils.parseEther(String(randomBetween))
    const nonce = await erc20Permit.nonces(wallet.address)
    const { v, r, s } = await getSignature(wallet.address, contract.address, amount, nonce, deadline, privateKey);
    console.log('当前质押数量：', randomBetween)
    const permitData = {
        deadline: deadline,
        amount: amount,
        v: v,
        s: s,
        r: r,
    };
    // console.log(permitData)
    const tx = await contract.depositStETH(permitData, {
        gasLimit: config.gasLimit // 根据您的情况调整 gas 限制
    });
    await tx.wait();
    console.log('✅Transaction Hash:', tx.hash);
    console.log('✅该钱包地址已经完成质押: ', wallet.address)
    // 等待
    const generateTime = generateRandomInt(config.waitTimeMin, config.waitTimeMax);
    console.log('等待结束，执行操作...', generateTime, "s");
    // 等待
    await new Promise(resolve => setTimeout(resolve, 1000 * generateTime));
}

function getRandomBetween(min, max) {
    return parseFloat((Math.random() * (max - min) + min).toFixed(3));
}

function generateRandomInt(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min; // 含最大值，含最小值
}

async function main() {
    // 从文件中读取私钥
    const privateKeyFile = 'privateKeys.txt';
    const privateKeys = readFileSync(privateKeyFile, 'utf8').split('\n').map(line => line.trim());

    // 逐行调用方法
    for (const privateKey of privateKeys) {
        await callDeposit(privateKey);
    }
}

main().catch(error => {
    console.error(error);
    process.exit(1);
});